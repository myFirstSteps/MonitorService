*****************************************************************************
Текст задания
******************************************************************************
Код задания необходимо разместить на github.com - и его URL прислать нашим HR.
По времени выполнения - задание для вас рассчитано до 14-04-2014 включительно.

Проект должен собираться Maven'ом.
Запускаться из под любого сервлет контейнера (Jetty, Tomcat, JBoss и пр.).

Общее описание
---------------------
Разработать сервис (Servlet) для мониторинга статуса приложений в кластере.
Приложения с заданной периодичностью отсылают информацию на сервис. Приложений может быть несколько десятков.
Каждое приложение может быть запущено в нескольких экземплярах(инстансах) - до нескольких десятков.
Сервис регистрирует состояние инстансов(приложений). Позволяет получать информацию об их активности.

Детали
---------------------
1. Регистрация статуса
Сервис должен принимать POST запрос от приложения:
имя приложения, UUID инстанса приложения, статус (UP, STARTING, PROCESSING), загрузка CPU (в процентах), среднее время обработки одного запроса приложением(мс), общее количество обработанных запросов.

Сервис регистрирует эти параметры и проставляет дату регистрации с точностью до мс. В ответ всегда возвращает - OK.
Разработать структуру данных для хранения в оперативной памяти.

2. Списки активностей приложений        
Сервис должен через GET запросы отдавать:
- Для заданного имени приложения (обычный параметр в GET запросе) - выдавать список приложений упорядоченных от минимального значения [среднего времени обработки одного запроса] до максимального значения [среднего времени обработки одного запроса];
- Список приложений упорядоченных от менее загруженных к более загруженным(параметр CPU) и упорядоченных так же по времени от недавно зарегистрированнх к давно зарегистрированным, при этом у приложения должен быть статус UP;
- Список только имен всех приложений отсортированных в алфавитном порядке.
- Количество инстансов для данного приложения - передается в GET запросе имя приложения.
- Список приложений у которых загрузка CPU - попадает в заданный интервал. Интервал задается значениями GET параметров: minCpu и maxCpu.
Уточнения
---------------------
Разработать сервис на Servlet. Желательно использовать версию сервлетов ниже 3.0 (те что без аннотаций)

Для примера, может быть запущено несколько копий приложения GSHOCK:
имя: GSHOCK, инстанс:32e84447-dc66-4e80-ab60-c1ba0d5c15d0
имя: GSHOCK, инстанс:9fa14dba-60bc-4564-a430-8d34b1cdbe24
имя: GSHOCK, инстанс:d8d06049-067b-4254-a647-39775e8647fe

Отображение списка приложений при ответе на GET запрос - должно быть примитивным (plain text) и отображаться в браузере.
Для примера:
1, GSHOCK, 32e84447-dc66-4e80-ab60-c1ba0d5c15d0, UP, 10%,.......
2, GSHOCK, d8d06049-067b-4254-a647-39775e8647fe, UP, 12%,.......

Ответы сервиса буду просматриваться напрямую в браузере или через плагины для Chrome
REST Console или Advanced REST client, т.к. позволяют удобно отправлять POST и GET запросы.

В README.md - приложить тестовые параметры(варианты запросов) для регистрация параметров приложений.
И так же варианты тестовых запросов для GET.

***********************************************************************************************************************
Ответ на задание
***********************************************************************************************************************
В файле MonitorService/src/main/webapp/index.jsp сверстан простой web-интерфейс для отправки запросов.  URL паттерн сервлета указаный в формах страницы "/req.svl".

При регистрации активности приложения используется POST запрос со следующими параметрами:
	(Приводятся к String)
	appName - имя приложения
        uuid -UUID инстанса приложения
        status - статус приложения (UP, STARTING и т. д.)
	
	(приводятся к int и long)
	cpu - загрузка CPU
    	handlingTime - время обработки одного запроса приложением (мс)
    	processed - общее количество обработанных запросов

POST запрос с параметрами  appName=GSHOCK&uuid=32e84447-dc66-4e80-ab60-c1ba0d5c1511&status=UP&cpu=10&handlingTime=100&processed=1100
Зарегистрирует инстанс  32e84447-...d5c1511 приложения  GSHOCK со статусом UP, загрузкой цпу 10%, средним временем обработки одного запроса 100 ms и общим кол-вом обработанных запросов 1100.


Для запроса списка активностей используются GET запросы с параметрами вида:

?key=s&n=5&appName=GSHOCK&minCpu=11&maxCpu=100     - для строгих запросов

?key=f&appName=GSHOCK&likeParam=status&unlike=&like=UP&min=10&
borderParam=cpu&max=100&orderParam=regTime     - для гибких запросов.

Параметры: 
key — определяет какой запрос выполнится. key=s — выполнится один из 6 строгих запросов. key=f  - выполнится гибкий запрос.
n — номер строгого запроса, который нужно выполнить (от 1 до 6) согласно т.з.
appName — имя приложения, для которого запрашивается список активностей ( там, где этот параметр требуется по логике запроса).
minCpu и maxCpu — задаются только для строгого запроса 5 ( список приложений, у которых загрузка CPU  попадает в заданный интервал). 
 
Гибкие запросы позволяют выбрать список активностей по разным характеристикам.
likeParam  - параметр, значение которого будет сравниваться со значением  переданным в  like.
like — значение, с которым требуется сравнить параметр likeParam. 
unlike — позволяет вести сравнение по равенству (для этого значение unlike должно быть пустым или отсутствовать в запросе ) или неравенству (любое не нулевое значение).
Например, запрос с параметрами: 
?key=f&appName=GSHOCK&likeParam=status&unlike=&like=UP  вернет список активностей GSHOCK значение параметра, status которых равно UP.  
А запрос 
?key=f&appName=GSHOCK&likeParam=cpu&unlike=1&like=150 вернет список активностей GSHOCK, значение загрузки cpu которых не равно 150%.  

borderParam — параметр, значение которого попадает в заданный диапазон указанный в параметрах min и max. Если один из параметров min или max не указан, отбираются активности, значения соответствующих параметров которых  больше или меньше указанного параметра.
?key=f&appName=GSHOCK&min=10&borderParam=cpu&max=100 вернет список инстансов приложения GSHOCK, загрузка CPU которых между 10 и 100%.

?key=f&appName=GSHOCK&borderParam=handlingTime&max=200   вернет список инстансов приложения GSHOCK, у которых среднее время обработки  менее 201 ms.

orderParam — определяет по значению какого параметра будет упорядочен вывод.
?key=f&appName=GSHOCK&orderParam=processed       вернет список инстансов приложения GSHOCK упорядоченный от большего количества обработанных запросов к меньшему.

?key=f&orderParam=regTime&inverse=on    вернет список всех приложений  упорядоченный от давно зарегистрированных к недавно зарегистрированным.

inverse=on определяет, что список должен быть инвертирован.

Параметры стандартных 6 запросов:
?key=s&n=1&appName=GSHOCK
?key=s&n=2
?key=s&n=3
?key=s&n=4&appName=GSHOCK
?key=s&n=5&minCpu=16&maxCpu=100
?key=s&n=6

Пример гибкого запроса:
?key=f&appName=&likeParam=status&unlike=1&like=UP&min=22&borderParam=cpu&
max=100&orderParam=regTime&inverse=on     -  вернет активности всех приложений, значение загрузки cpu которых между 22% и 100%, статус UP, упорядоченный от недавно зарегистрированных давно зарегистрированным.  
